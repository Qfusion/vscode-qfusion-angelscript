{
	"name": "angelscript",
	"scopeName": "source.angelscript",
	"patterns": [
		{
		    "name": "keyword.statement.angelscript",
			"match": "\\b(auto|is|array|funcdef)\\b\\s*"
		},
		{
		    "name": "storage.type.built-in.primitive",
			"match": "\\b(int8|int16|int32|int64|uint8|uint16|uint32|uint64)\\b\\s*"
		},
		{
			"include": "#special_block"
		},
		{
			"include": "#strings"
		},
		{
			"match": "\\bthis\\b",
			"name": "variable.language.this.angelscript"
		},
		{
			"match": "\\bnull\\b",
			"name": "constant.language.angelscript"
		},
		{
			"match": "::",
			"name": "punctuation.separator.namespace.access.angelscript"
		},
		{
			"begin": "(?x)\n(?:\n  ^ |                  # beginning of line\n  (?:(?<!else|new|=))  # or word + space before name\n)\n((?:[A-Za-z_][A-Za-z0-9_]*::)*+~[A-Za-z_][A-Za-z0-9_]*) # actual name\n\\s*(\\()              # opening bracket",
			"beginCaptures": {
				"1": {
					"name": "entity.name.function.angelscript"
				},
				"2": {
					"name": "punctuation.definition.parameters.begin.angelscript"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.parameters.end.angelscript"
				}
			},
			"name": "meta.function.destructor.angelscript",
			"patterns": [
				{
					"include": "$base"
				}
			]
		},
		{
			"begin": "(?x)\n(?:\n  ^ |                  # beginning of line\n  (?:(?<!else|new|=))  # or word + space before name\n)\n((?:[A-Za-z_][A-Za-z0-9_]*::)*+~[A-Za-z_][A-Za-z0-9_]*) # actual name\n\\s*(\\()              # opening bracket",
			"beginCaptures": {
				"1": {
					"name": "entity.name.function.angelscript"
				},
				"2": {
					"name": "punctuation.definition.parameters.begin.angelscript"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.parameters.end.angelscript"
				}
			},
			"name": "meta.function.destructor.prototype.angelscript",
			"patterns": [
				{
					"include": "$base"
				}
			]
		},
		{
			"include": "source.c"
		},
		{
			"include": "#operators"
		}
	],
	"repository": {
		"angle_brackets": {
			"begin": "<",
			"end": ">",
			"name": "meta.angle-brackets.angelscript",
			"patterns": [
				{
					"include": "#angle_brackets"
				},
				{
					"include": "$base"
				}
			]
		},
		"block": {
			"begin": "\\{",
			"beginCaptures": {
				"0": {
					"name": "punctuation.section.block.begin.bracket.curly.angelscript"
				}
			},
			"end": "\\}",
			"endCaptures": {
				"0": {
					"name": "punctuation.section.block.end.bracket.curly.angelscript"
				}
			},
			"name": "meta.block.angelscript",
			"patterns": [
				{
					"captures": {
						"1": {
							"name": "support.function.any-method.angelscript"
						},
						"2": {
							"name": "punctuation.definition.parameters.angelscript"
						}
					},
					"match": "(?x)\n(\n  (?!while|for|do|if|else|switch|catch|enumerate|return|r?iterate)\n  (?:\\b[A-Za-z_][A-Za-z0-9_]*+\\b|::)*+ # actual name\n)\n\\s*(\\() # opening bracket",
					"name": "meta.function-call.angelscript"
				},
				{
					"include": "$base"
				}
			]
		},
		"operators": {
			"patterns": [
				{
					"match": "\\s*@\\s*(?=\\w)",
					"name": "storage.modifier.pointer.angelscript"
				}
			]
		},
		"constructor": {
			"patterns": [
				{
					"begin": "(?x)\n(?:^\\s*)  # beginning of line\n((?!while|for|do|if|else|switch|catch|enumerate|r?iterate)[A-Za-z_][A-Za-z0-9_:]*) # actual name\n\\s*(\\()  # opening bracket",
					"beginCaptures": {
						"1": {
							"name": "entity.name.function.angelscript"
						},
						"2": {
							"name": "punctuation.definition.parameters.begin.angelscript"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.parameters.end.angelscript"
						}
					},
					"name": "meta.function.constructor.angelscript",
					"patterns": [
						{
							"include": "$base"
						}
					]
				},
				{
					"begin": "(?x)\n(:)\n(\n  (?=\n    \\s*[A-Za-z_][A-Za-z0-9_:]* # actual name\n    \\s* (\\() # opening bracket\n  )\n)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.parameters.angelscript"
						}
					},
					"end": "(?=\\{)",
					"name": "meta.function.constructor.initializer-list.angelscript",
					"patterns": [
						{
							"include": "$base"
						}
					]
				}
			]
		},
		"special_block": {
			"patterns": [
				{
					"begin": "\\b(namespace)\\b\\s*([_A-Za-z][_A-Za-z0-9]*\\b)?+",
					"beginCaptures": {
						"1": {
							"name": "storage.type.angelscript"
						},
						"2": {
							"name": "entity.name.type.angelscript"
						}
					},
					"captures": {
						"1": {
							"name": "keyword.control.namespace.$2"
						}
					},
					"end": "(?<=\\})|(?=(;|,|\\(|\\)|>|\\[|\\]|=))",
					"name": "meta.namespace-block.angelscript",
					"patterns": [
						{
							"begin": "\\{",
							"beginCaptures": {
								"0": {
									"name": "punctuation.definition.scope.angelscript"
								}
							},
							"end": "\\}",
							"endCaptures": {
								"0": {
									"name": "punctuation.definition.scope.angelscript"
								}
							},
							"patterns": [
								{
									"include": "#special_block"
								},
								{
									"include": "#constructor"
								},
								{
									"include": "$base"
								}
							]
						},
						{
							"include": "$base"
						}
					]
				},
				{
					"begin": "\\b(class|struct)\\b\\s*([_A-Za-z][_A-Za-z0-9]*\\b)?+(\\s*:\\s*(public|protected|private)\\s*([_A-Za-z][_A-Za-z0-9]*\\b)((\\s*,\\s*(public|protected|private)\\s*[_A-Za-z][_A-Za-z0-9]*\\b)*))?",
					"beginCaptures": {
						"1": {
							"name": "storage.type.angelscript"
						},
						"2": {
							"name": "entity.name.type.angelscript"
						},
						"4": {
							"name": "storage.type.modifier.angelscript"
						},
						"5": {
							"name": "entity.name.type.inherited.angelscript"
						},
						"6": {
							"patterns": [
								{
									"match": "(public|protected|private)",
									"name": "storage.type.modifier.angelscript"
								},
								{
									"match": "[_A-Za-z][_A-Za-z0-9]*",
									"name": "entity.name.type.inherited.angelscript"
								}
							]
						}
					},
					"end": "(?<=\\})|(?=(;|\\(|\\)|>|\\[|\\]|=))",
					"name": "meta.class-struct-block.angelscript",
					"patterns": [
						{
							"include": "#angle_brackets"
						},
						{
							"begin": "\\{",
							"beginCaptures": {
								"0": {
									"name": "punctuation.section.block.begin.bracket.curly.angelscript"
								}
							},
							"end": "(\\})(\\s*\\n)?",
							"endCaptures": {
								"1": {
									"name": "punctuation.section.block.end.bracket.curly.angelscript"
								},
								"2": {
									"name": "invalid.illegal.you-forgot-semicolon.angelscript"
								}
							},
							"patterns": [
								{
									"include": "#special_block"
								},
								{
									"include": "#constructor"
								},
								{
									"include": "$base"
								}
							]
						},
						{
							"include": "$base"
						}
					]
				}
			]
		}
	}
}
